/* Gavin Smith & Liam Durant
 * COMP 40
 * 2/6/18
 * DESIGN
 */

/* uarray2 */

1. What is the abstract thing you are trying to represent?

Taking something in matrix format and saving it as a 2D
unboxed array.

2. What functions will you offer, and what are the contracts 
those functions must meet?

T * uarray2_new(int height, int width, int dataSize) Creates a new 
2D uarray and returns a pointer to it.

void * uarray2_at(T uarray2, int row, int col) Retrieves the 
value at a specified index of the uarray and returns it.

int uarray2_width(T uarray2) Returns the width of the uarray.

int uarray2_height(T uarray2) Returns the height of the uarray.

void uarray2_free(T * uarray2) Frees all data allocated in
creating the uarray.

void uarray2_map_row_major(T uarray2, void apply(int row, int col,
        T array, void *cl), void *cl), void *cl) Iterates through
the uarray and returns the value in each index to an apply function.
Does so in row major order.

void uarray2_map_col_major(T uarray2, void apply(int row, int col,
        T array, void *cl), void *cl), void *cl) Iterates through
the uarray and returns the value in each index to an apply function.
Does so in column major order.

3. What examples do you have of what the functions are supposed 
to do?

T * uarray2_new(5, 5, sizeof(int)); //Creates a 5 by 5 uarray of ints
void * uarray2_at(array, 2, 3); //Gets value at (2,3) in the uarray.
int uarray2_width(array); //Returns the width of the array.
int uarray2_height(array); //Returns the height of the array.
void uarray2_free(*array); //Frees data in the array.
void uarray2_map_row_major(array, printValues, NULL);
        //Iterates through the passed in array and calls 
        //printValues function on each index (in row major)
void uarray2_map_col_major(array, printValues, NULL);
        //Iterates through the passed in array and calls 
        //printValues function on each index (in column major)

4. What representation will you use, and what invariants will it
satisfy?

We are going to represent a 2D unboxed array with a 1D Hanson
unboxed array that is long enough so that the dimensions of the 
2D array exist only within the 1D array. For example if the array
is 5x5 our 1D array would be 25 indecies long so that the 5x5 array
is represented, with every 5 indecies being a new row. The 
invariant is that every "width" number of indecies will mean that
a new row is beginning.

5. How does an object in you representation correspond to an object
in the world of ideas?

The 1D array will represent a matrix of data. Every "width" 
number of indecies cooresponds to a complete row.

6. What test cases have you devised?

Pass in empty file.
Pass in image file.
Pass in non-matrix styled file.
Pass in very large files.
Pass in very small files. 

First we will test to see if we can create a new array correctly,
and have the width and height displayed correctly. Then we have
to make sure the memory is freed correctly. For the width and 
height functions we will test passing in arrays that dont exist,
as well as empty arrays, and these should throw exceptions. Then
we will test trying to access out of bounds indecies with the at
function, which again should throw an exception. Also we will test
the mapping functions first by printing out each value that is 
mapped through and then trying to do something with the actual
values that are recieved.

7. What programming idioms will you need?

The idiom for making a struct.
The idiom for allocating memory.
The idiom for handling void pointers.
The idiom for handling unboxed arrays.

/* bit2 */

1. What is the abstract thing you are trying to represent?

We are trying to represent an array of bits to represent things
like images.

2. What function will you offer, and what are the contracts 
those functions must meet?

T * bit2_new(int height, int width) Creates a new
bitarray and returns a pointer to it.

int bit2_put(T bit2, int bitnum, int row, int col) Takes in a 
bitarray as well as an int which is the value of the bit being
placed (0 or 1) and then the coordinates where it will be placed.
Returns the value of the bit previously in that spot.

int bit2_get(T bit2, int row, int col) Takes in a bitarray and
the coordinates of the bit that you wish to retrieve, returns
the value of the bit in those coordinates.

int bit2_width(T bit2) Takes in a bitarray and returns the width.

int bit2_height(T bit2) Takes in a bitarray and returns the height.

void bit2_free(T * bit2) Takes in a pointer to a bitarray and 
frees all of the data allocated creating the array.

void bit2_map_row_major(T bit2, void apply(int row, int col,
        T bitarr, int bitval, void *cl), void *cl) 
Takes in a bitarray and iterates through that array and calls
an apply function which is passed in as a function pointer. That
apply function takes in the coordinates of each index, the actual
array itself, the value of the bit at that index, and then the 
closure. Iterates through the array in row major style.

void bit2_map_col_major(T bit2, void apply(int row, int col,
        T bitarr, int bitval, void *cl), void *cl)
Takes in a bitarray and iterates through that array and calls
an apply function which is passed in as a function pointer. That
apply function takes in the coordinates of each index, the actual
array itself, the value of the bit at that index, and then the 
closure. Iterates through the array in column major style.

3. What examples do you have of what the functions are supposed 
to do?

T * bit2_new(6, 6); //Creates a bitarray that is 6 by 6 bits. 
int bit2_put(bitarr, 0, 2, 5);
        //Puts a bit value of 0 in the passed in bitarray at row
        2 column 5 and returns the previous bit value.
int bit2_get(bitarr, 3, 3); //Retrieves the bitvalue
        of the index (3,3) and returns it.
int bit2_width(bitarr); //Returns the width of the passed in array. 
int bit2_height(bitarr); //Returns the height of the passed in array.
void bit2_free(*bitarr); //Frees the data from the passed in array.
void bit2_map_row_major(bitarr, printBits, NULL);
        //Takes in the passed in array and calls the function
        pointer for each value in the array. Iterates through
        in row major style.
void bit2_map_col_major(bitarr, printBits, NULL);
        //Takes in the passed in array and calls the function
        pointer for each value in the array. Iterates through
        in column major style.

4. What representation will you use, and what invariants will it
satisfy?

We are going to represent a two dimensional array of bits with
a long one dimensional array of bits that will be the length of
the product of the width and height of the desired two dimensional
array (such as if the desired array is 5x5 we would create a 25
index long array). The invariants will be that each index will 
contain a bit value of either 0 or 1 and that every "width"
number of indecies will mark the beginning of a new row.

5. How does an object in your representation correspond to an object
in the world of ideas?

Each value in our two dimensional array is just a bit that is 
either a 0 or a 1. Our array will have a width and a height but
since it is represented with a long one dimensional array every
"width" number of indecies will represent one row, with the next
value being the next row.

6. What test cases have you devised?

First we will have to just create a bit array and then print out
all the values and then make sure that we can properly free the 
bit array. After the basic functioning is correctly operating we 
can attempt to use get and put first to access bits that are in the
array and then later trying to access bits that are out of bounds, 
and this should throw an exception. Then we would just check to see
if the width and height functions properly return the dimensions
of the current bitarray. We will also test that both of our mapping
functions correctly iterate through the array and are able to print
out each bit (because this is the easiest way to check that it
iterated correctly). Then we could try our mapping functions with
more complex apply functions. 

7. What programming idioms will you need?

The idiom for making a struct.
The idiom for allocating memory.
The idiom for handling void pointers.
